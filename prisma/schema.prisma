generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @db.Uuid
  email             String             @unique
  createdAt         DateTime           @default(now())
  instagramAccounts InstagramAccount[]
  contentPosts      ContentPost[]
  userSettings      UserSettings?
  logs              Log[]
}

model InstagramAccount {
  id           String        @id @default(uuid())
  username     String
  accessToken  String
  userId       String        @db.Uuid
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  contentPosts ContentPost[]

  @@unique([userId, username])
}

model ContentPost {
  id                 String           @id @default(uuid())
  caption            String
  imageUrl           String?
  contentType        ContentType      @default(IMAGE)
  status             PostStatus       @default(DRAFT)
  scheduledFor       DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             String           @db.Uuid
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccountId String?
  instagramAccount   InstagramAccount? @relation(fields: [instagramAccountId], references: [id], onDelete: SetNull)
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum ContentType {
  IMAGE
  VIDEO
  BLOG_POST
}

enum LogType {
  CONTENT_POST
  AI_GENERATION
}

model Log {
  id          String    @id @default(uuid())
  type        LogType
  endpoint    String
  requestData Json
  response    Json?
  status      Int?
  error       String?
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model UserSettings {
  id                String    @id @default(uuid())
  userId            String    @unique @db.Uuid
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  openaiApiKey      String?
  geminiApiKey      String?
  openaiMonthlyLimit Int      @default(100)
  geminiMonthlyLimit Int      @default(100)
  openaiUsageCount  Int       @default(0)
  geminiUsageCount  Int       @default(0)
  usageResetDate    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}